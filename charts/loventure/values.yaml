# ============================================================
# ðŸš« COMMENTED OUT - Using individual service values.yaml files
# This file is kept for reference but all settings are now
# managed in each service's own values.yaml file
# ============================================================

# global:
#   imageRegistry: docker.io/pitterpetter
#   imagePullPolicy: IfNotPresent
#   namespace: loventure-app
#   environment: production
# # Gateway Service Configuration
# gateway:
#   replicaCount: 2
#   image:
#     repository: gateway
#     tag: latest
#     pullPolicy: Always
#   service:
#     type: ClusterIP
#     port: 8080
#   resources:
#     limits:
#       cpu: 500m
#       memory: 512Mi
#     requests:
#       cpu: 250m
#       memory: 256Mi
#   # Additional required settings for gateway subchart
#   imagePullSecrets: []
#   nameOverride: ""
#   fullnameOverride: ""
#   serviceAccount:
#     create: true
#     annotations: {}
#     name: ""
#     automountServiceAccountToken: true
#   podAnnotations: {}
#   podSecurityContext:
#     fsGroup: 2000
#   securityContext:
#     capabilities:
#       drop:
#         - ALL
#     readOnlyRootFilesystem: false
#     runAsNonRoot: true
#     runAsUser: 1000
#   autoscaling:
#     enabled: false
#     minReplicas: 1
#     maxReplicas: 100
#     targetCPUUtilizationPercentage: 80
#   nodeSelector: {}
#   tolerations: []
#   affinity: {}
#   # Gateway Ingress Configuration
#   ingress:
#     enabled: true
#     staticIpName: "pitterpetter-gateway-ip"
#     managedCertificate: "pitterpetter-ssl"
#     sslRedirect: true
#     hosts:
#       - host: "api.loventure.us"
#         paths:
#           - path: "/api"
#             pathType: "Prefix"
#           - path: "/health"
#             pathType: "Prefix"
#           - path: "/actuator"
#             pathType: "Prefix"
#           - path: "/oauth2"
#             pathType: "Prefix"
#           - path: "/login/oauth2"
#             pathType: "Prefix"
#           - path: "/login/oauth2/code"
#             pathType: "Prefix"
#           - path: "/logout"
#             pathType: "Prefix"
#     tls:
#       enabled: true
#       secretName: "pitterpetter-ssl"
#       hosts:
#         - "api.loventure.us"
#     cors:
#       enabled: true
#       allowOrigin: "http://localhost:5173, https://api.loventure.us, https://loventure.us"
#       allowMethods: "GET,POST,PUT,DELETE,OPTIONS"
#       allowHeaders: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
#     # Rate Limiting
#     rateLimit:
#       enabled: true
#       requests: 100
#       window: "1m"
#   # Gateway deployment configuration with latest image tag from main
#   deployment:
#     image:
#       tag: 639da0b
# # Auth Service Configuration
# auth-service:
#   service:
#     name: auth-service
#     type: ClusterIP
#     port: 8081
#     targetPort: 8081
#   deployment:
#     replicaCount: 2
#     image:
#       repository: auth-service
#       tag: "d3ac28c"
#       pullPolicy: IfNotPresent
#     resources:
#       limits:
#         cpu: 500m
#         memory: 512Mi
#       requests:
#         cpu: 250m
#         memory: 256Mi
#     env:
#       - name: SERVER_PORT
#         value: "8081"
#   postgres:
#     enabled: true
#     image:
#       registry: docker.io
#       repository: postgres
#       tag: "14"
#     service:
#       port: 5432
#     persistence:
#       enabled: true
#       size: 10Gi
#       storageClass: ""
#       accessMode: ReadWriteOnce
#     auth:
#       postgresPassword: "" # Set via ArgoCD UI: auth-service.postgres.auth.postgresPassword
#       database: "auth"
#       username: "root"
# # Content Service Configuration
# content-service:
#   service:
#     name: content-service
#     type: ClusterIP
#     port: 8082
#     targetPort: 8082
#   deployment:
#     replicaCount: 2
#     image:
#       repository: content-service
#       tag: "1007227"
#       pullPolicy: IfNotPresent
#     resources:
#       limits:
#         cpu: 500m
#         memory: 512Mi
#       requests:
#         cpu: 250m
#         memory: 256Mi
#     env:
#       - name: SERVER_PORT
#         value: "8082"
#   postgres:
#     enabled: true
#     image:
#       registry: docker.io
#       repository: postgres
#       tag: "14"
#     service:
#       port: 5432
#     persistence:
#       enabled: true
#       size: 10Gi
#       storageClass: ""
#       accessMode: ReadWriteOnce
#     auth:
#       postgresPassword: "" # Set via ArgoCD UI: content-service.postgres.auth.postgresPassword
#       database: "content"
#       username: "root"
# # Course Service Configuration
# course-service:
#   service:
#     name: course-service
#     type: ClusterIP
#     port: 8083
#     targetPort: 8083
#   deployment:
#     replicaCount: 2
#     image:
#       repository: course-service
#       tag: "ccde9f0"
#       pullPolicy: IfNotPresent
#     env:
#       - name: SERVER_PORT
#         value: "8083"
#     resources:
#       limits:
#         cpu: 500m
#         memory: 512Mi
#       requests:
#         cpu: 250m
#         memory: 256Mi
#   postgres:
#     enabled: true
#     image:
#       registry: docker.io
#       repository: postgres
#       tag: "14"
#     service:
#       port: 5432
#     persistence:
#       enabled: true
#       size: 10Gi
#       storageClass: ""
#       accessMode: ReadWriteOnce
#     auth:
#       postgresPassword: "" # Set via ArgoCD UI: course-service.postgres.auth.postgresPassword
#       database: "course"
#       username: "root"
# # AI Service Configuration
# ai-service:
#   service:
#     name: ai-service
#     type: ClusterIP
#     port: 8000
#     targetPort: 8000
#   deployment:
#     replicaCount: 2
#     image:
#       repository: ai-service
#       tag: "e4e286f"
#       pullPolicy: IfNotPresent
#     resources:
#       limits:
#         cpu: 1000m
#         memory: 1Gi
#       requests:
#         cpu: 500m
#         memory: 512Mi
#     env:
#       - name: ENVIRONMENT
#         value: "production"
#       - name: PORT
#         value: "8000"
# # gateway-service:
# #   deployment:
# #     image:
# #       tag: cb446c3
